language: cpp

## Install deps
addons:
    apt:
        sources:
            - crossbuild-essential-armhf
            - crossbuild-essential-arm64
            - ubuntu-toolchain-r-test

## For some reason, default osx image is not working with homebrew
osx_image: xcode10.2

## Compilations and tests
matrix:
    include:
        ## Linux-gcc-x86
        ## --------------------------------------------------------------------------------------------
        ## SSE2:
        - os: linux
          env:
            - TOOLSET_CC=gcc-8
            - TOOLSET_CXX=g++-8
            - SIMD=SSE2
        ## SSE42:
        - os: linux
          env:
            - TOOLSET_CC=gcc-8
            - TOOLSET_CXX=g++-8
            - SIMD=SSE42
        ## AVX:
        - os: linux
          env:
            - TOOLSET_CC=gcc-8
            - TOOLSET_CXX=g++-8
            - SIMD=AVX
        ## AVX2:
        - os: linux
          env:
            - TOOLSET_CC=gcc-8
            - TOOLSET_CXX=g++-8
            - SIMD=AVX2
        ## AVX2+FMA:
        - os: linux
          env:
            - TOOLSET_CC=gcc-8
            - TOOLSET_CXX=g++-8
            - SIMD=AVX2
            - SIMD_OPTIONALS=FMA
        ## Linux-clang-x86
        ## --------------------------------------------------------------------------------------------
        ## SSE2:
        - os: linux
          env:
            - TOOLSET_CC=clang-6.0
            - TOOLSET_CXX=clang++-6.0
            - SIMD=SSE2
        ## SSE42:
        - os: linux
          env:
            - TOOLSET_CC=clang-6.0
            - TOOLSET_CXX=clang++-6.0
            - SIMD=SSE42
        ## AVX:
        - os: linux
          env:
            - TOOLSET_CC=clang-6.0
            - TOOLSET_CXX=clang++-6.0
            - SIMD=AVX
        ## AVX2:
        - os: linux
          env:
            - TOOLSET_CC=clang-6.0
            - TOOLSET_CXX=clang++-6.0
            - SIMD=AVX2
        ## AVX2+FMA:
        - os: linux
          env:
            - TOOLSET_CC=clang-6.0
            - TOOLSET_CXX=clang++-6.0
            - SIMD=AVX2
            - SIMD_OPTIONALS=FMA
        ## OSX-clang-x86
        ## --------------------------------------------------------------------------------------------
        ## SSE2:
        - os: osx
          env:
            - TOOLSET_CC=clang
            - TOOLSET_CXX=clang++
            - SIMD=SSE2
        ## SSE42:
        - os: osx
          env:
            - TOOLSET_CC=clang
            - TOOLSET_CXX=clang++
            - SIMD=SSE42
        ## AVX:
        - os: osx
          env:
            - TOOLSET_CC=clang
            - TOOLSET_CXX=clang++
            - SIMD=AVX
        ## Travis OSX does not support AVX2 instruction set, do not use it:
        ### AVX2:
        #- os: osx
        #  env:
        #    - TOOLSET_CC=clang
        #    - TOOLSET_CXX=clang++
        #    - SIMD=AVX2
        ### AVX2+FMA:
        #- os: osx
        #  env:
        #    - TOOLSET_CC=clang
        #    - TOOLSET_CXX=clang++
        #    - SIMD=AVX2
        #    - SIMD_OPTIONALS=FMA
        ## Windows-MSVC-x86
        ## --------------------------------------------------------------------------------------------
        ## SSE2:
        - os: windows
          env:
            - TOOLSET_CC=cl.exe
            - TOOLSET_CXX=cl.exe
            - SIMD=SSE2
        ## AVX:
        - os: windows
          env:
            - TOOLSET_CC=cl.exe
            - TOOLSET_CXX=cl.exe
            - SIMD=AVX
        ## AVX2:
        - os: windows
          env:
            - TOOLSET_CC=cl.exe
            - TOOLSET_CXX=cl.exe
            - SIMD=AVX2
        ## AVX2+FMA:
        - os: windows
          env:
            - TOOLSET_CC=cl.exe
            - TOOLSET_CXX=cl.exe
            - SIMD=AVX2
            - SIMD_OPTIONALS=FMA

## It seems that travis ignore addons "chocolatey" so do it manually
install:
    - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
        choco install -y python3 ninja;
      fi
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja clang-format;
      fi
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        sudo apt update;
        sudo apt install gcc-8 g++-8 clang-6.0 libmpfr-dev ninja-build -y;
      fi

## Prepare build
before_script:
    - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
        scripts/travis-windows-env.bat;
        source _env.sh;
        export CMAKE_ARGS="$CMAKE_ARGS -DPYTHON_EXECUTABLE=C:\\Python37\\python";
        export PYTHON="C:\\Python37\\python";
      else
        export PYTHON="python3";
      fi
    - if [[ ! -z "$TARGET" ]]; then
        export CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_CXX_COMPILER_TARGET=$TARGET";
        export CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_C_COMPILER_TARGET=$TARGET";
      fi
    - mkdir build
    - export HATCH_SIMD=$( echo "$SIMD" | tr '[:upper:]' '[:lower:]' )
    - $PYTHON egg/hatch.py -Af --simd $HATCH_SIMD
    - cd build
    - cmake .. $CMAKE_ARGS
        -DCMAKE_CXX_COMPILER=$TOOLSET_CXX -DCMAKE_C_COMPILER=$TOOLSET_CC
        -DSIMD=$SIMD -DSIMD_OPTIONALS=$SIMD_OPTIONALS
        -GNinja

## Build
script:
    - cmake --build .
    - cmake --build . --target tests
    - ctest . -V
